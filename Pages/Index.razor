@page "/"
@using BlazorStyled
@using DataJuggler.UltimateHelper 
@using DataJuggler.Blazor.Components
@using DataJuggler.Blazor.FileUpload
@using DataJuggler.Blazor.Components.Enumerations
@using System.Drawing
@using Blazor.Excelerate.Enumerations
@using Blazor.Excelerate.Models
@inject IJSRuntime JSRuntime

<Styled @bind-Classname="@CheckMarkClassName">
    width: 32px;
    height: 32px;
    position: fixed;
    bottom: 4vh;
    left: 60%;
    background-image: url('../Images/Check.png');
    z-index: 100;
    visibility: @CheckVisibility;
</Styled>
<Styled @bind-Classname="@CheckMarkClassName2">
    width: 32px;
    height: 32px;
    position: fixed;
    top: 76vh;
    left: 60%;
    background-image: url('../Images/Check.png');
    z-index: 100;
    visibility: @CheckVisibility;
</Styled>
<Styled @bind-Classname="DownloadLink">    
    color: white;
    background: none!important;
    border: none;
    padding: 0!important;
    font-family: Verdana;
    text-decoration: none;
    cursor: pointer;    
    height: 1.5vh;
    line-height: 1.5vh;
    font-size: 12px;
    font-weight: normal;
    position: fixed;    
    display: inline;
    left: 2.8%;
    margin-top: .4vh;
</Styled>
<Styled @bind-Classname="DownloadLink2">    
    background: none! important;
    border: none;
    padding: 0 !important;
    font-family: Verdana;
    text-decoration: none;
    cursor: pointer;    
    height: 1.5vh;
    line-height: 1.5vh;
    font-size: 12px;
    font-weight: normal;
    position: relative;    
    display: inline-block;
    left: 114%;
    top: .4vh;
    margin-top: .4vh;
    z-index: 41;
</Styled>
<Styled @bind-Classname="Grid">
    display: inline-block;
    height: auto;
    width: 80%;
    font-size: 13.6px;
    position: relative;
    left: -12%;
    top: 12vh;
</Styled>
<Styled @bind-Classname="MainContent">
    font-size: 1em;
    line-height: 1em;
    color: white;
    position: fixed;
    top: 40vh;
    left: 26%;
    display: grid;
    z-index: 52;
</Styled>
<Styled @bind-Classname="OrangeButton">
    position: fixed;
    background-color: transparent;
    border: 0px;
    outline: none;
    background-image: url('../images/OrangeButton.png');
    background-repeat: no-repeat;
    top: 27vh;
    left: 26.8vw;
    width: 10%;
    height: 3.6vh;
    background-size: 100% 100%;    
    cursor: pointer;
    text-align: center;
    font-size: 14px;
    font-family: Verdana;
    z-index: 6;
</Styled>
<Styled @bind-Classname="SelectClasses">
    display: @DisplayStyle;
    width: 20%;
    height: 6vh;
    position: fixed;
    top: 27vh;
    left: 6vw;
    z-index: 40;
</Styled>
<Styled @bind-Classname="SideBarElementText">
    text-align: center;
    font-family: Verdana;
    font-size: 14px;
    font-weight: bold;
</Styled>
<Styled @bind-Classname="SideBarSmallText">
    text-align: left;
    font-family: Verdana;
    font-size: 12px;
    font-weight: normal;
</Styled>
<Styled @bind-Classname="SideBarLargeText">
    text-align: left;
    font-family: Verdana;
    font-size: 13px;
    font-weight: normal;
</Styled>
<Styled @bind-Classname="SideBarLargeTextBold">
    text-align: left;
    font-family: Verdana;
    font-size: 13px;
    font-weight: bold;
</Styled>
<Styled @bind-Classname="Slogan">
    font-family: Verdana;
    font-size: 2.8vh;
    position: absolute;
    top: 8.4vh;
    left: .4%;
    white-space: nowrap;    
</Styled>
<Styled @bind-Classname="Smallheader">
    font-weight: bold;
    font-size: 13px;
</Styled>
<Styled @bind-Classname="StatusStyle">  
    text-align: center;
    position: absolute;
    top: 18vh;
    left: -4%;
    width: 60%;
    height: 2.8vh;
    line-height: 2.8vh;
    font-size: 16px;
    color: @LabelColor;
</Styled>
<Styled @bind-Classname="VersionStyle">
    position: fixed;
    right: 4%;
    top: 2vh;
    color: white;
    font-size: 14px;
</Styled>

<div class="sidebar">
    <div class="sidebarelement">
       <div class="@SideBarElementText">
            Downloads
        </div>
        <div class="displayinline">
            <div class="smallicon">
                <a class="@DownloadLink" download="MemberData.xlsx" href="@SampleMemberDataPath" target="_blank">MemberData.xlsx</a>
            </div>
            <div class="@SideBarSmallText">
                Sample workbook with random data for testing:<br />
                Members (20,000)<br />
                Address (20,000)<br />
                States (51)
            </div>
            <br />
            <div class="blankline"></div>
            <div class="blanklinesmall"></div>
            <div class="@SideBarLargeTextBold">
                Want the source code?<br />
            </div>
            <div class="@SideBarSmallText text-nowrap">
                <div class="blanklinesmall"></div>
                <span class="text-nowrap">
                    <a class="whitetext" href="https://github.com/DataJuggler/Blazor.Excelerate" target="_blank">Blazor.Excelerate</a><br />
                </span>
                <div class="blanklinesmall"></div>
                <span class="text-nowrap">
                    <a class="whitetext" href="https://github.com/DataJuggler/Excelerate" target="_blank">DataJuggler.Excelerate</a><br />
                </span>
                <div class="blanklinesmall"></div>
                <span class="text-nowrap">
                    <a class="whitetext" href="https://github.com/DataJuggler/Excelerate.WinForms.Demo" target="_blank">Excelerate.WinForms.Demo</a><br />
                </span>
                <div class="blanklinesmall"></div>
                <span class="text-nowrap">
                    <a class="whitetext" href="https://github.com/DataJuggler/DataJuggler.Blazor.Components" target="_blank">DataJuggler.Blazor.Components</a><br />
                </span>
                <div class="blanklinesmall"></div>
                <span class="text-nowrap">
                    <a class="whitetext" href="https://github.com/DataJuggler/BlazorFileUpload" target="_blank">DataJuggler.Blazor.FileUpload</a><br />
                </span>
                <div class="blanklinesmall"></div>
                <span class="text-nowrap">
                    <a class="whitetext" href="https://github.com/DataJuggler/UltimateHelper" target="_blank">DataJuggler.UltimateHelper</a><br />
                </span>
                 <div class="blanklinesmall"></div>
                <span class="text-nowrap">
                    <a class="whitetext" href="https://github.com/DataJuggler/ExcelerateWinApp/" target="_blank">ExcelerateWinApp</a><br />
                </span>
                <div class="blankline"></div>
                <div class="blankline"></div>
                <div class="@SideBarLargeTextBold">
                    Worth the price (free)?<br />
                </div>
                <div class="blanklinesmall"></div>
                <div>
                    <span class="@SideBarLargeText">
                        Please leave stars on<br />
                        Git Hub and subscribe<br />
                        to my YouTube channel.
                    </span>
                </div>
                <div class="blanklinesmall"></div>
                <a href="https://youtube.com/DataJuggler" target="_blank">
                    <div class="bottomsidebar"></div>
                </a>
            </div>
        </div>        
    </div>    
</div>
<Sprite Name="Logo" Parent="this" Height="10.8" Width="8.4"
        XPosition="2.68" YPosition="2" Visible="true" Position="fixed" 
        Subscriber=this ImageUrl="../images/ExcelerateLogoSmallWhite.png">
 </Sprite>
<div class="topbar">
    <div class="logotext">
    </div>
    <div class="@Slogan">
        Code Generate C# Classes From Excel Header Rows
    </div>
</div>
<div class="topright">
    <div class="@VersionStyle">
        Version 2.2.1
    </div>    
    <a class="noborder" href="https://datajuggler.com"><div class="businesscard"></div></a>
</div>
<div class="contentmain">
    <div class="tabrow">
        <ImageButton TextColor="@InstructionButtonTextColor" ButtonNumber="4" Name="InstructionsButton" Unit="vw"
            HeightUnit="vh" Height="4.8" Width="8.8" ButtonText="Instructions" ImageUrl="@InstructionButtonUrl"
            TextSize="TextSizeEnum.MediumLarge" ClickHandler="@ButtonClicked"></ImageButton>
        <ImageButton TextColor="@LoadingButtonTextColor" ButtonNumber="5" Name="LoadingButton" Unit="vw"            
            HeightUnit="vh" Height="4.8" Width="8.8" ButtonText="How To Load" ImageUrl="@LoadingButtonUrl"
            TextSize="TextSizeEnum.MediumLarge" ClickHandler="@ButtonClicked"></ImageButton>
        <ImageButton TextColor="@SavingButtonTextColor" ButtonNumber="6" Name="SavingButton" Unit="vw"
            HeightUnit ="vh" Height="4.8" Width="8.8" ButtonText="How To Save" ImageUrl="@SavingButtonUrl"
            TextSize="TextSizeEnum.MediumLarge" ClickHandler="@ButtonClicked"></ImageButton>
    </div>    
    <div class="text-nowrap @SelectClasses">        
            <ComboBox Name="SheetNamesComboBox" Theme=ThemeEnum.Blue Unit="vw" Width=10
                HeightUnit="vh" ListItemHeight=3 LabelColor="Color.White" ComboBoxLeft="2" ComboBoxHeight="3"               
                CheckListMode="true" CheckedListheight=8 Position="fixed" Left="25.5" Top=27 
                ListItemBackgroundColor="Color.White" ListBackgroundColor="Color.Transparent" ListItemTop="-2"                
                ListItemLeft="6" ListItemWidth="10" ComboBoxWidth="2" VisibleCount=5
                ButtonPosition="relative"ButtonLeft="4.5" ButtonTop="-2" LabelClassName="textalignright"
                ButtonTextColor="Color.Black" Height="10" LabelText="Sheets:" Parent="this">
            </ComboBox>
    </div>    
    <div class="row displayinline contentmaintoprow">        
        <ValidationComponent Name="NamespaceComponent" Caption="Namespace:" LabelFontSizeUnit="vh" 
            LabelFontSize="2.4" Position="relative" Unit="%" HeightUnit="vh" Height="3" LabelColor="white"
            Top="14.8" Left="-14" IsRequired="true" Width="8" LabelWidth="30" TextBoxWidth="32"
            LabelClassName="down2 right2" Parent="this">
        </ValidationComponent>            
    </div>
    <div class="ontop">
    <ComboBox Name="TargetFrameworkComboBox" Theme=ThemeEnum.Blue LabelColor="Color.White"
              Position="fixed" Unit="vw" HeightUnit="vh" Visible="true" Left="23" Top="20.5" ZIndex="150"
              Width="10" TextSize="TextSizeEnum.Medium" ButtonText=".Net8" Height="4" ComboBoxLeft="7"              
              ButtonPosition="relative"ButtonLeft="7" ButtonTop="-2" ButtonTextColor="Color.Black" 
              VisibleCount="6" LabelText="Framework:" Parent="this" ListItemLeft="8" ListItemTop="-5">
    </ComboBox>
    </div>
     <div>
        <div class="row">                
            <ImageButton ButtonNumber="1" ButtonText="Generate Classes" Name="GenerateClassesButton"
                Left="42" Top="26.8" HeightUnit="vh" Height="4" Position="fixed" ZIndex="41"
                Width="132" ImageUrl="@ButtonUrl" Parent="this"></ImageButton>    
             <ImageButton ButtonNumber="2" ButtonText="Reset" Name="ResetFileUploadButton"
                Left="58" Top="26.8" HeightUnit="vh" Height="4" Position="fixed" ZIndex="44"
                Width="96" ImageUrl="@ButtonUrl" Parent="this"></ImageButton>    
        </div>
    </div>
    <div>
        <div class="row">                 
            <FileUpload CustomSuccessMessage="Your file uploaded successfully." 
                OnReset="OnReset" ResetButtonClassName="localbutton" ShowStatus="false"
                PartialGuidLength="12" MaxFileSize=@UploadLimit FilterByExtension="true" 
                ShowCustomButton="true"  ButtonText="Upload Excel" OnChange="OnFileUploaded"
                CustomButtonClassName="@OrangeButton" AllowedExtensions=".xlsx"
                ShowResetButton="false" AppendPartialGuid="true" Parent="this"
                CustomExtensionMessage="Only .xlsx extensions are allowed."
                InputFileClassName="customfileupload" Visible=false Status="Refresh"
                FileTooLargeMessage=@FileTooLargeMessage>
            </FileUpload>
        </div>
    </div>    
    <div class="@StatusStyle">
        <label class="text-center">@Status</label>
    </div>
    @if ((HasResponse) && (Response.Success) && (Response.HasFileName) && (Response.HasFullPath))
     { 
         <div class="smallicon2 text-white text-nowrap">
            <a class="@DownloadLink2 downloadlink2hover" download="@Response.FileName" 
                href="@DownloadPath" target="_blank">@Response.FileName</a><br />
            <span class="small text-white movedownsmall">
                 Browsers do not allow downloading files with .cs extensions, so download this zip file and extract to a folder.
            </span>
        </div>
    }
    <div class="@MainContent">
        <div class="@Grid">
            @if (MainContentDisplay != MainContentDisplayEnum.None)
            {
                <div class="column instructionscolumn1">
                    <ImageButton ButtonNumber="3" ButtonText="Hide" Name="HideButton"
                        TextSize="TextSizeEnum.Large" HeightUnit="vh" Height="4" ZIndex="52"
                        Width="120" ImageUrl="../Images/OrangeButton.png" Parent="this"></ImageButton>
                </div>
            }
            @if (MainContentDisplay == MainContentDisplayEnum.Instructions)
            {
                <div class="column instructionscolumn2">
                    <div class="marginsmall @Smallheader">Instructions</div>
                    <div class="blankline"></div>
                    1. Prepare your Excel workbook (save as .xlsx extension) and ensure you have a header row, and the<br> 
                    column names make good property names. Download MemberData.xlsx to see an example.<br />
                    2. Upload your workbook and select one or more sheets to code generate classes for.<br />
                    3. Type in a namespace for your project and click the 'Generate Classes' button.<br />
                    4. Download the zip file and extract the contents to get your .cs file(s).<br />
                    <div class="blankline"></div>
                    <div class="marginsmall @Smallheader">Tips / Troubleshooting</div>
                    <div class="blankline"></div>
                    You must have some rows of data in each column to attempt to determine the data type. Getting the data type<br />is kind of a hack,
                    as I could not find a way with EPP Plus to get the column data types.<br />
                    <div class="blankline"></div>
                    <div class="blankline"></div>
                    If you have a problem generating classes, create an issue here or to clone or star:<br />
                    <a class="orangetext" href="https://github.com/DataJuggler/Excelerate">DataJuggler.Excelerate Git Hub</a><br />
                    <div class="blankline"></div>
                    If you have a problem with this site, create an issue here or to clone or star:<br />
                    <a class="orangetext" href="https://github.com/DataJuggler/Blazor.Excelerate">Blazor.Excelerate Git Hub</a><br />
                    <div class="blankline"></div>
                    <div class="marginsmall @Smallheader">Data Privacy</div>
                    <div class="blankline"></div>
                    No one has access to my server except me and my dog.<br />                
                </div>
            }
            else if (MainContentDisplay == MainContentDisplayEnum.LoadingExamples)
            {  
                <div class="loadingexamplesgrid">
                    <div class="smalltext up40">
                        The following code example is from my opensource project StockData<br>
                        https://github.com/DataJuggler/StockData
                    </div>
                    <div class="height16"></div>
                    <div>
                        <div class="commenttext">
                            // Create a new instance of a 'WorksheetInfo' object.
                        </div>
                        <div class="codetext">
                            WorksheetInfo worksheetInfo = new WorksheetInfo();
                        </div>
                        <div class="height10"></div>
                        <div class="commenttext">
                            // set the properties
                        </div>                        
                        <div class="codetext">
                            worksheetInfo.SheetName = "NASDAQ";<br>
                        </div>
                        <div class="codetext">
                            worksheetInfo.LoadColumnOptions = LoadColumnOptionsEnum.LoadAllColumnsExceptExcluded;<br>
                        </div>
                        <div class="codetext">
                            worksheetInfo.Path = "C:\\Projects\\GitHub\\StockData\\Documents\\Stocks\\NASDAQ.xlsx";<br>
                        </div>
                        <div class="height10"></div>
                        <div class="commenttext">
                            // load the worksheet
                        </div>
                        <div class="codetext">
                            Worksheet worksheet = ExcelDataLoader.LoadWorksheet(worksheetInfo);
                        </div>
                        <div class="height10"></div>
                        <div class="commenttext">
                            // Load the NASDAQ entries
                        </div>
                        <div class="codetext">
                            @LoadExample
                        </div>                        
                    </div>
                </div>
                <ImageButton ButtonNumber="7" ButtonText="Copy" Name="CopyButton" Position="fixed"
                    Left="52" Top="92" HeightUnit="vh" Height="4"  ZIndex="120" ClickHandler="@ButtonClicked"
                    Width="96" ImageUrl="../Images/OrangeButton.png" Parent="this"></ImageButton>
                <div class="@CheckMarkClassName"></div>
            }
            else if (MainContentDisplay == MainContentDisplayEnum.SavingExamples)
            {
                <div class="savingexamplesgrid">
                    <div class="smalltext up40">
                        This example is from ExcelerateWinApp and shows how to save your changes back to Excel.
                        https://github.com/DataJuggler/ExcelerateWinApp
                    </div>
                    <div class="height24"></div>
                    <div>
                        <div class="commenttext">
                            @CastComment
                        </div>
                        <div class="codetext">
                            @CastCode
                        </div>
                        <div class="height10"></div>
                        <div class="commenttext">
                            // Save Worksheet Example
                        </div>
                        <div class="codetext">
                            SaveWorksheetResponse response = <br>
                            <span class="displayinline right32">ExcelHelper.SaveWorksheet(excelerateObjectList, addressWorksheet, info, SaveWorksheetCallback, 500);
                            </span>
                        </div>
                    </div>
                </div>
                <ImageButton ButtonNumber="8" ButtonText="Copy" Name="CopyButton2" Position="fixed"
                        Left="52" Top="76.4" HeightUnit="vh" Height="4" ZIndex="120" ClickHandler="@ButtonClicked"
                             Width="96" ImageUrl="../Images/OrangeButton.png" Parent="this"></ImageButton>
                <div class="@CheckMarkClassName2"></div>
            }
        </div>
    </div>
</div>
@if (ShowProgress)
{
    <div class="progresscontainer">
        <div class=@ProgressStyle>
            <span class="text-white">@PercentString</span>
            <div class="slice">
                <div class="bar"></div>
                <div class="fill"></div>
            </div>
        </div>
    </div>
}
<Sprite Subscriber=this Visible="true" Interval="60" Position="fixed" Name="InvisibleSprite"
        XPosition="-500" YPosition="100" Width="120" Height="120" ZIndex="-1">
</Sprite>

    



